#include <iostream>
#include <chrono>

long long dwumianNewtona_iteracyjnie(int n, int k) {
    long long wynik = 1;

    for (int i = 1; i <= k; ++i) {
        wynik = wynik * (n - i + 1) / i;
    }

    return wynik;
}

long long dwumianNewtona_rekurencyjnie(int n, int k) {
    if (k == 0 || k == n) {
        return 1;
    }

    return dwumianNewtona_rekurencyjnie(n - 1, k - 1) + dwumianNewtona_rekurencyjnie(n - 1, k);
}

int nwdEuklidesa_iteracyjnie(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}


int nwdEuklidesa_rekurencyjnie(int a, int b) {
    if (b == 0) {
        return a;
    }
    return nwdEuklidesa_rekurencyjnie(b, a % b);
}

//funkcja do pomiaru czasu
template <typename F>
double measureTime(F function, int param1, int param2) {
    auto start = std::chrono::high_resolution_clock::now();
    function(param1, param2);
    auto end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> duration = end - start;
    return duration.count();
}


int main() {

    int n = 20;
    int k = 10;

    std::cout << "Dwumian Newtona:\n";
    std::cout << "Iteracyjnie: " << dwumianNewtona_iteracyjnie(n, k) << "\n";
    std::cout << "Rekurencyjnie: " << dwumianNewtona_rekurencyjnie(n, k) << "\n";

    int a = 252;
    int b = 105;

    std::cout << "\nNajwiększy Wspólny Dzielnik (NWD) Euklidesa:\n";
    std::cout << "Iteracyjnie: " << nwdEuklidesa_iteracyjnie(a, b) << "\n";
    std::cout << "Rekurencyjnie: " << nwdEuklidesa_rekurencyjnie(a, b) << "\n";

    std::cout << "\nCzas wykonania Dwumianu Newtona - Iteracyjnie: "
        << measureTime(dwumianNewtona_iteracyjnie, n, k) << " sekundy\n";

    std::cout << "Czas wykonania Dwumianu Newtona - Rekurencyjnie: "
        << measureTime(dwumianNewtona_rekurencyjnie, n, k) << " sekundy\n";

    std::cout << "Czas wykonania NWD Euklidesa - Iteracyjnie: "
        << measureTime(nwdEuklidesa_iteracyjnie, a, b) << " sekundy\n";

    std::cout << "Czas wykonania NWD Euklidesa - Rekurencyjnie: "
        << measureTime(nwdEuklidesa_rekurencyjnie, a, b) << " sekundy\n";

    return 0;
}
